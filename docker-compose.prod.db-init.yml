# docker-compose.db-init.prod.yml
services:
  db-init:
    image: postgres:15
    environment:
      POSTGRES_HOST: postgres # Should match the name of the 'postgres' service as defined under 'services'
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
      POSTGRES_SUPER_USER_NAME: ${POSTGRES_SUPER_USER_NAME}
      POSTGRES_SUPER_USER_PASSWORD: ${POSTGRES_SUPER_USER_PASSWORD}
      APP_DB_USER_NAME: ${APP_DB_USER_NAME}
      APP_DB_USER_PASSWORD: ${APP_DB_USER_PASSWORD}
    # The command now simply executes the mounted script
    command: [ "bash", "/usr/local/bin/init-db.sh" ]
#    volumes:
#      # Mount the initialization script into a suitable location in the container
#      - ./mounted-scripts/init-db.sh:/usr/local/bin/init-db.sh:ro
    networks:
      - app-net
    # The 'depends_on' condition ensures Postgres is healthy before db-init attempts to connect
    depends_on:
      postgres:
        condition: service_healthy

# Define the network that this db-init service will connect to.
# It MUST be an external network that matches the one created by 'docker stack deploy'.
networks:
  app-net:
    external: true
    name: promptchain-stack_app-net # Name should be <stack_name>_<network_name> (e.g., 'promptchain-stack_app-net')