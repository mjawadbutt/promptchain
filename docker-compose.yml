#TODO: Make it a template if u want to remove port hardcoding in any of the compose files.
# my-app-stack.yml
services:
  app:
    image: ghcr.io/${GITHUB_USERNAME}/${APP_ARTIFACT_ID}:${APP_VERSION}
    environment:
      # The default value for the host, as per builder.properties (localhost), is for running promptchain locally.
      # In that case, Docker will expose the hosts at localhost:<postgres_port> (the postgres compose
      # file must configure the port as a published port, which we have already done).
      # However, in this case, since we are running inside docker swarm, the Docker will expose the postgres host
      # at <postgres-stack-name>_<postgres-service-name>. So we need to override the default here.
      # Also note that this is the right place for overriding because here we know that promptchain is being
      # started inside a container and not locally.
      POSTGRES_HOST: postgres-stack_postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      # See above for overriding reason.
      REDIS_HOST: redis-stack_redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      APP_DATA_PARENT_DIR: /
      APP_DATA_DIR_NAME: ${APP_DATA_DIR_NAME}
      APP_LOGS_PARENT_DIR: /
      APP_LOGS_DIR_NAME: ${APP_LOGS_DIR_NAME}
      APP_DB_NAME: ${APP_DB_NAME}
      APP_DB_USER_NAME: ${APP_DB_USER_NAME}
      APP_DB_USER_PASSWORD: ${APP_DB_USER_PASSWORD}
      RUN_IN_DEBUG_MODE: ${RUN_IN_DEBUG_MODE}
      JAVA_OPTS: ${JAVA_OPTS}
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      start_period: 20s
      interval: 5s
      timeout: 2s
      retries: 5
    ports:
      - target: 8080
        published: 8080
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 2GB
        reservations:
          cpus: '0.25'
          memory: 512MB
      restart_policy:
        # Always try to restart if it fails
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 10s
      update_config:
        parallelism: 1
        delay: 5s
        order: stop-first
      rollback_config:
        parallelism: 1
        delay: 5s
        order: stop-first
    # Mount volumes
    volumes:
      - logs_dir:/${APP_LOGS_DIR_NAME}
      - data_dir:/${APP_DATA_DIR_NAME}
    networks:
      - redis-network
      - postgres-network

# Define volumes
volumes:
  logs_dir:
    driver: local
  data_dir:
    driver: local

networks:
  redis-network:
    name: redis-stack_network
    external: true
  postgres-network:
    name: postgres-stack_network
    external: true
