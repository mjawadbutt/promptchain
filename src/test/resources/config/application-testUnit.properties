# This property file can be used to define any platform independent properties that are specific to test JUnit cases only.

# This is useful if, while writing unit-tests, we need to "stub" a service rather than mock it. In that case
# all we would need to do would be to define an impl, load it as a bean inside a UnitTestConfiguration class.
# Also, in order to activate bean overriding, we need to name the method that creates the bean in the
# UnitTestConfiguration class as exactly the same as how Spring creates name of a bean when it defines it the
# context. Spring follows one of the following rules for naming the bean (depending on how its defined as a bean):
#
# 1. If a bean is defined via @Component/@Service then spring uses CAMEL CASE VERSION OF THE BEAN'S CLASS NAME
#    to name the bean.
# 2. Otherwise, if the bean is defined via @Bean then spring uses the NAME OF THE @Bean METHOD AS IS to name the bean.
#
# This is currently being used by the bean definitions in UnitTestConfiguration class to allow for context caching
# between the unit-test method invocations of the IFlowRestControllerUnitTests class and also to allow us to test
# all layers of our code as is (without mocking) and only mock those layers that communicate with an external service.
spring.main.allow-bean-definition-overriding=true
