# docker-compose-redis.yml
services:
  redis:
    image: redis:8.0.3
    # Give it a stable hostname if using Sentinel later
    hostname: redis-master
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    # The order of --save and --appendonly might matter to some Redis versions or entrypoints.
    # Let's try putting persistence options at the end or ensuring they are correctly interpreted.
    # A common pattern is to just list the config parameters.
    # Can add password support later if needed.
    #    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}", "--maxmemory", "64mb", "--maxmemory-policy", "allkeys-lru", "--appendonly", "no", "--save", "" ]
    command: [ "redis-server", "--maxmemory", "64mb", "--maxmemory-policy", "allkeys-lru", "--appendonly", "no", "--save", "" ]
    healthcheck:
      #      test: [ "CMD-SHELL", "echo 'auth ${REDIS_PASSWORD}\nping' | redis-cli | grep PONG" ]
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 5s         # Check every 5 seconds
      timeout: 3s          # Wait up to 3 seconds for the check to complete
      retries: 3           # Allow 3 consecutive failures before marking unhealthy
      start_period: 15s    # Wait 15 seconds before starting health checks (gives Redis time to initialize)
    ports:
      # Even though the commented out port block works on local machines (because Docker Desktop configures
      # ingress ports properly by default, it does not work on GitHub Workflows because it requires some
      # additional config to allow host apps to connect to swarm containers.
      # So we use the simple port mapping for now (which assumes the host app and this container run on the
      # same host). This allows the app to connect to this postgres container while running integration tests
      # on GitHub workflows and also works for all local use cases.
      - "6379:6379"
    # TODO: Dont need this for now. It will be needed only if we deploy to a swarm with multiple nodes for example
    # TODO: in production envs, where it is possible that this container and the app are running on different hosts.
    # TODO: However then we would need to make a separate compose file (copy paste this and replace port mapping
    # TODO: above with this one) and create a prod deploy script that uses the prod compose file.
    #      - target: 6379
    #        # This maps the container's 6379 to the host's 6379 on the node it runs.
    #        # Be careful if multiple services expose the same port on the same node.
    #        # Often for internal services, you omit 'published' and rely on Swarm DNS.
    #        published: 6379
    #        protocol: tcp
    #        # Default is 'ingress' which uses Swarm's routing mesh which allows communication between services
    #        # across nodes and networks (as opposed to host, which allows single node communication only)
    #        # We are using ingress even for local dev and CI because we want to be as close as possible to the real thing.
    #        mode: ingress
    networks:
      - network
    deploy:
      # Start with one shared Redis instance for simplicity. Can scale to Sentinel/Cluster.
      replicas: 1
      resources:
        limits:
          memory: 68m
      restart_policy:
        condition: on-failure # Only restart if the container exits with a non-zero code
        delay: 5s             # Wait 5 seconds before attempting a restart
        max_attempts: 5       # Try to restart up to 5 times
        window: 60s           # Consider failures within a 60-second window for max_attempts
        # (i.e., if it fails 5 times within 60s, Swarm will stop trying)

# Define a dedicated overlay network for your shared services
networks:
  # This network will be created with the stack name as prefix (e.g., <stack-name>_network)
  network:
    # Here overlay is used instead of bridge because we want to run our containers in 'swarm' mode
    # (rather than normal 'compose up' mode). And overlay networks (as opposed to bridge networks) allow
    # communication between services/containers in swarm mode.
    driver: overlay
    # Allows services from other stacks to connect to it.
    attachable: true