# docker-compose-redis.yml
services:
  redis:
    image: redis:8
    # Give it a stable hostname if using Sentinel later
    hostname: redis-master
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command:
      [
        "redis-server",
        "--save", "",
        "--appendonly", "no",
        "--maxmemory", "64mb",
        "--maxmemory-policy", "allkeys-lru",
        "--requirepass", "${REDIS_PASSWORD}"
      ]
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping --raw | grep PONG" ]
      interval: 3s
      timeout: 3s
      retries: 5
    ports:
      # Optional: Publish port to a host if you need to access Redis from outside the Swarm (e.g., for redis-cli)
      # - "6379:6379" # This makes it accessible on the Swarm manager/worker where it runs
      # More commonly, you only expose it to the internal Swarm network for other services
      - target: 6379
        # This maps the container's 6379 to the host's 6379 on the node it runs.
        # Be careful if multiple services expose the same port on the same node.
        # Often for internal services, you omit 'published' and rely on Swarm DNS.
        published: 6379
        protocol: tcp
        # Default is 'ingress' which uses Swarm's routing mesh which allows communication between services
        # across nodes and networks (as opposed to host, which allows single node communication only)
        # We are using ingress even for local dev and CI because we want to be as close as possible to the real thing.
        mode: ingress
    networks:
      - network
    deploy:
      # Start with one shared Redis instance for simplicity. Can scale to Sentinel/Cluster.
      replicas: 1
      resources:
        limits:
          memory: 68m
      restart_policy:
        # Always try to restart if it fails
        condition: on-failure
        delay: 3s
        max_attempts: 3
        window: 10s

# Define a dedicated overlay network for your shared services
networks:
  # This network will be created with the stack name as prefix (e.g., <stack-name>_network)
  network:
    # Here overlay is used instead of bridge because we want to run our containers in 'swarm' mode
    # (rather than normal 'compose up' mode). And overlay networks (as opposed to bridge networks) allow
    # communication between services/containers in swarm mode.
    driver: overlay
    # Allows services from other stacks to connect to it.
    attachable: true